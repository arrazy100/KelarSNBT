basePath: /api/
definitions:
  question.AnswerDB:
    properties:
      content:
        type: string
      correct_answer:
        type: boolean
      id:
        type: string
    type: object
  question.CreateAnswer:
    properties:
      content:
        type: string
      correct_answer:
        type: boolean
    required:
    - content
    type: object
  question.CreateQuestion:
    properties:
      materi:
        type: integer
      question:
        type: string
    required:
    - materi
    - question
    type: object
  question.QuestionDB:
    properties:
      answers:
        items:
          $ref: '#/definitions/question.AnswerDB'
        type: array
      id:
        type: string
      materi:
        type: integer
      question:
        type: string
    type: object
  question.UpdateAnswer:
    properties:
      content:
        type: string
      correct_answer:
        type: boolean
      id:
        type: string
    type: object
  question.UpdateQuestion:
    properties:
      materi:
        type: integer
      question:
        type: string
    type: object
  task.CreateTask:
    properties:
      end_date:
        type: string
      name:
        type: string
      start_date:
        type: string
    required:
    - end_date
    - name
    - start_date
    type: object
  task.SetQuestion:
    properties:
      questions:
        items:
          type: string
        type: array
    required:
    - questions
    type: object
  task.TaskDB:
    properties:
      end_date:
        type: string
      id:
        type: string
      name:
        type: string
      questions:
        items:
          type: string
        type: array
      start_date:
        type: string
    type: object
  task.UpdateTask:
    properties:
      end_date:
        type: string
      name:
        type: string
      start_date:
        type: string
    type: object
  task_models.CreateTask:
    properties:
      end_date:
        type: string
      name:
        type: string
      start_date:
        type: string
    required:
    - end_date
    - name
    - start_date
    type: object
  task_models.SetQuestion:
    properties:
      questions:
        items:
          type: string
        type: array
    required:
    - questions
    type: object
  task_models.TaskDB:
    properties:
      end_date:
        type: string
      id:
        type: string
      name:
        type: string
      questions:
        items:
          type: string
        type: array
      start_date:
        type: string
    type: object
  task_models.UpdateTask:
    properties:
      end_date:
        type: string
      name:
        type: string
      start_date:
        type: string
    type: object
  test.CreateTest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  test.TestDB:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  test.UpdateTest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:3001
info:
  contact:
    email: afdhalarrazy111@gmail.com
    name: Muhammad Afdhal Arrazy
    url: https://github.com/arrazy100
  description: No Description
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://tos.kelarsnbt.com
  title: Kelar SNBT
  version: "1.0"
paths:
  /answers/{answerId}:
    delete:
      description: Delete an answer by id
      parameters:
      - description: Write answer id
        in: path
        name: answerId
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: delete an answer
      tags:
      - answer
  /answers/{questionId}:
    patch:
      description: Edit an answer by question id
      parameters:
      - description: Write question id
        in: path
        name: questionId
        required: true
        type: string
      - description: Answer JSON
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/question.UpdateAnswer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/question.QuestionDB'
      summary: Edit an answer
      tags:
      - answer
    post:
      description: Add an answer to a question
      parameters:
      - description: write question id
        in: path
        name: questionId
        required: true
        type: string
      - description: Answer JSON
        in: body
        name: answer
        required: true
        schema:
          $ref: '#/definitions/question.CreateAnswer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/question.AnswerDB'
      summary: add answer to a question
      tags:
      - answer
  /questions:
    get:
      consumes:
      - application/json
      description: Get all available questions
      parameters:
      - description: write page number
        in: query
        name: page
        type: integer
      - description: write limit number
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/question.QuestionDB'
            type: array
      summary: get questions
      tags:
      - question
    post:
      description: Create a new question to choose for Task
      parameters:
      - description: Question JSON
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/question.CreateQuestion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/question.QuestionDB'
      summary: create a new question
      tags:
      - question
  /questions/{questionId}:
    delete:
      description: Delete a question by id
      parameters:
      - description: Write question id
        in: path
        name: questionId
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: delete a question
      tags:
      - question
    get:
      consumes:
      - application/json
      description: Get question by id
      parameters:
      - description: Write question id
        in: path
        name: questionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/question.QuestionDB'
      summary: get question by id
      tags:
      - question
    patch:
      description: Edit a question by id
      parameters:
      - description: Write question id
        in: path
        name: questionId
        required: true
        type: string
      - description: Question JSON
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/question.UpdateQuestion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/question.QuestionDB'
      summary: Edit a question
      tags:
      - question
  /tasks:
    get:
      consumes:
      - application/json
      description: Get all available tasks
      parameters:
      - description: write page number
        in: query
        name: page
        type: integer
      - description: write limit number
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/task_models.TaskDB'
            type: array
      summary: get tasks
      tags:
      - task
    post:
      description: Create a new task for events
      parameters:
      - description: Task JSON
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/task_models.CreateTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task_models.TaskDB'
      summary: create a new task
      tags:
      - task
  /tasks/{taskId}:
    delete:
      description: Delete a task by id
      parameters:
      - description: Write task id
        in: path
        name: taskId
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: delete a task
      tags:
      - task
    get:
      consumes:
      - application/json
      description: Get task by id
      parameters:
      - description: Write task id
        in: path
        name: taskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task_models.TaskDB'
      summary: get task by id
      tags:
      - task
    patch:
      description: Edit a task by id
      parameters:
      - description: Write task id
        in: path
        name: taskId
        required: true
        type: string
      - description: Task JSON
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/task_models.UpdateTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task_models.TaskDB'
      summary: Edit a task
      tags:
      - task
  /tasks/setQuestions/{taskId}:
    patch:
      description: Set questions for a task by task id
      parameters:
      - description: write task id
        in: path
        name: taskId
        required: true
        type: string
      - description: Task JSON
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/task_models.SetQuestion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task_models.SetQuestion'
      summary: set questions for a task
      tags:
      - task
  /tests:
    get:
      consumes:
      - application/json
      description: Get all available tests
      parameters:
      - description: write page number
        in: query
        name: page
        type: integer
      - description: write limit number
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/test.TestDB'
            type: array
      summary: get tests
      tags:
      - test
    post:
      description: Create a new test
      parameters:
      - description: Task JSON
        in: body
        name: test
        required: true
        schema:
          $ref: '#/definitions/test.CreateTest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/test.TestDB'
      summary: create a new test
      tags:
      - test
  /tests/{testId}:
    delete:
      description: Delete a test by id
      parameters:
      - description: Write test id
        in: path
        name: testId
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: delete a test
      tags:
      - test
    get:
      consumes:
      - application/json
      description: Get test by id
      parameters:
      - description: Write test id
        in: path
        name: testId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/test.TestDB'
      summary: get test by id
      tags:
      - test
    patch:
      description: Edit a test by id
      parameters:
      - description: Write test id
        in: path
        name: testId
        required: true
        type: string
      - description: Test JSON
        in: body
        name: test
        required: true
        schema:
          $ref: '#/definitions/test.UpdateTest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/test.TestDB'
      summary: Edit a test
      tags:
      - test
swagger: "2.0"
